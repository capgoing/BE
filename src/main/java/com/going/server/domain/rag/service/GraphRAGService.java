package com.going.server.domain.rag.service;

import com.going.server.domain.chatbot.dto.CreateChatbotResponseDto;
import com.going.server.domain.chatbot.entity.Chatting;
import com.going.server.domain.chatbot.repository.ChattingRepository;
import com.going.server.domain.graph.entity.Graph;
import com.going.server.domain.graph.repository.GraphNodeRepository;
import com.going.server.domain.graph.repository.GraphRepository;
import com.going.server.domain.rag.dto.GraphQueryResult;
import com.going.server.domain.rag.util.PromptBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

@Service
@RequiredArgsConstructor
@Slf4j
public class GraphRAGService {

    private final GraphRepository graphRepository;
    private final GraphNodeRepository graphNodeRepository;
    private final SimilarityFilterService similarityFilterService;
    private final PromptBuilder promptBuilder;
    private final ChattingRepository chattingRepository;
    private final CypherQueryGenerator cypherQueryGenerator;
    private final GraphQueryExecutor graphQueryExecutor;
    private final RagAnswerCreateService ragAnswerCreateService;

    /**
     * 사용자 질문에 대해 Cypher 쿼리 → 그래프 정보 검색 → 프롬프트 생성 → LLM 응답 생성
     * 본 메서드는 LangChain 없이 구현한 Spring 기반 GraphRAG의 핵심 흐름입니다.
     *
     *     private LocalDateTime createdAt;
     *     private List<String> retrievedTriples; //관계 중심의 3요소 표현 ("물 -상태변화→ 응고")
     *     private List<String> sourceNodes; //질의에 사용된 핵심 노드들 ("물", "응고" 등)
     *     private List<String> 증강할때쓴자료; //LLM에 넘긴 context 문장들 (이름은 `augmentedSentences` 등으로 변경 권장)
     *     -> 이렇게 결과 나오도록 정리
     */
    public CreateChatbotResponseDto createAnswerWithGraphRAG(
            Long dbId,
            String userQuestion,
            List<Chatting> chatHistory
    ) {
        Graph graph = graphRepository.getByGraph(dbId);
        log.info("[GraphRAG] dbId: {}, question: {}", dbId, userQuestion);

        // 1. 질문 → Cypher 쿼리 생성
        String rawQuery = cypherQueryGenerator.generate(userQuestion);
            // ```cypher ~ ``` 블록 제거
        Matcher m = Pattern.compile("(?s)```cypher\\s*(.*?)\\s*```").matcher(rawQuery);
        String cleaned = m.find() ? m.group(1) : rawQuery;
            // 남은 ``` 제거
        cleaned = cleaned.replaceAll("```", "").trim();
        log.info("[GraphRAG] Cypher Query 생성됨:\n----\n{}\n----", cleaned);

        // 2. 쿼리 실행 → 문맥(context) 및 노드 라벨 추출
        List<GraphQueryResult> queryResults = graphQueryExecutor.runQuery(dbId, cleaned);
            // 문장
        List<String> contextChunks = queryResults.stream()
                .map(GraphQueryResult::getSentence)
                .toList();
            // 관계 트리플
        List<String> retrievedTriples = queryResults.stream()
                .map(GraphQueryResult::toTripleString)
                .distinct()
                .toList();
            // 노드
        List<String> sourceNodes = queryResults.stream()
                .map(GraphQueryResult::getNodeLabel)
                .filter(n -> n != null && !n.isBlank())
                .distinct()
                .toList();

        log.info("[GraphRAG] Retrieved {} context chunks", contextChunks.size());
        log.info("[GraphRAG] Retrieved {} triples", retrievedTriples.size());

        // 3. 프롬프트 구성
        String finalPrompt = promptBuilder.buildPrompt(contextChunks, retrievedTriples, userQuestion);
        log.info("[GraphRAG] Final Prompt constructed");

        // 4. RAG 응답 생성
        boolean hasContext = !contextChunks.isEmpty() || !retrievedTriples.isEmpty();
        String response = hasContext
                ? ragAnswerCreateService.chatWithContext(chatHistory, finalPrompt)
                : ragAnswerCreateService.chat(chatHistory, userQuestion);
        log.info("[GraphRAG] Response generated by LLM");

        // 5. 응답 저장
        Chatting answer = Chatting.ofGPT(graph, response);
        chattingRepository.save(answer);
        log.info("[GraphRAG] Response saved to DB");

        return CreateChatbotResponseDto.of(
                response,
                dbId.toString(),
                answer.getCreatedAt(),
                contextChunks,
                retrievedTriples,
                sourceNodes
        );
    }
}
