package com.going.server.domain.rag.service;

import com.going.server.domain.chatbot.dto.CreateChatbotResponseDto;
import com.going.server.domain.chatbot.entity.Chatting;
import com.going.server.domain.chatbot.repository.ChattingRepository;
import com.going.server.domain.graph.entity.Graph;
import com.going.server.domain.graph.repository.GraphNodeRepository;
import com.going.server.domain.graph.repository.GraphRepository;
import com.going.server.domain.rag.dto.GraphQueryResult;
import com.going.server.domain.rag.util.PromptBuilder;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
@RequiredArgsConstructor
@Slf4j
public class GraphRAGService {

    private final GraphRepository graphRepository;
    private final GraphNodeRepository graphNodeRepository;
    private final SimilarityFilterService similarityFilterService;
    private final PromptBuilder promptBuilder;
    private final ChattingRepository chattingRepository;
    private final CypherQueryGenerator cypherQueryGenerator;
    private final GraphQueryExecutor graphQueryExecutor;
    private final RagAnswerCreateService ragAnswerCreateService;

    /**
     * 사용자 질문에 대해 Cypher 쿼리 → 그래프 정보 검색 → 프롬프트 생성 → LLM 응답 생성
     * 본 메서드는 LangChain 없이 구현한 Spring 기반 GraphRAG의 핵심 흐름입니다.
     */
    public CreateChatbotResponseDto createAnswerWithGraphRAG(
            Long graphId,
            String userQuestion,
            List<Chatting> chatHistory
    ) {
        Graph graph = graphRepository.getByGraph(graphId);
        log.info("[GraphRAG] graphId: {}, question: {}", graphId, userQuestion);

        // 1. 질문 → Cypher 쿼리 생성
        String cypherQuery = cypherQueryGenerator.generate(userQuestion);
        log.info("[GraphRAG] Generated Cypher Query:\n{}", cypherQuery);

        // 2. 쿼리 실행 → 문맥(context) 및 노드 라벨 추출
        List<GraphQueryResult> queryResults = graphQueryExecutor.runQuery(graphId, cypherQuery);
        List<String> contextChunks = queryResults.stream().map(GraphQueryResult::sentence).toList();
        List<String> sourceNodes = queryResults.stream().map(GraphQueryResult::nodeLabel).distinct().toList();
        log.info("[GraphRAG] Retrieved {} context chunks", contextChunks.size());

        // 3. 프롬프트 구성
        String finalPrompt = promptBuilder.buildPrompt(contextChunks, userQuestion);
        log.info("[GraphRAG] Final Prompt constructed");

        // 4. RAG 응답 생성
        String response = contextChunks.isEmpty()
                ? ragAnswerCreateService.chat(chatHistory, userQuestion)
                : ragAnswerCreateService.chatWithContext(chatHistory, finalPrompt);
        log.info("[GraphRAG] Response generated by LLM");

        // 5. 응답 저장
        Chatting answer = Chatting.ofGPT(graph, response);
        chattingRepository.save(answer);
        log.info("[GraphRAG] Response saved to DB");

        return CreateChatbotResponseDto.of(
                response,
                graphId.toString(),
                answer.getCreatedAt(),
                contextChunks,
                sourceNodes
        );
    }
}
