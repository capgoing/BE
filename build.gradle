plugins {
	id 'java'
	id 'org.springframework.boot' version '3.4.1'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.going'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	implementation 'org.springframework.boot:spring-boot-starter-data-neo4j'
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
	
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	
	implementation 'com.theokanning.openai-gpt3-java:client:0.10.0'
	implementation 'com.theokanning.openai-gpt3-java:service:0.10.0'
	implementation 'com.stripe:stripe-java:22.10.0'
	implementation 'javax.xml.bind:jaxb-api:2.3.0'
	implementation 'sh.platform:config:2.2.2'
	
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
	useJUnitPlatform()
	ignoreFailures = true
}

task copyYml(type: Copy) {
	from './Backend_Config'
	include '*.properties'
	into 'src/main/resources'
}

processResources.dependsOn copyYml

jar {
	enabled = false
}

bootJar {
	enabled = true
	archiveBaseName = 'server'
	archiveVersion = '0.0.1-SNAPSHOT'
	manifest {
		attributes(
			'Main-Class': 'org.springframework.boot.loader.JarLauncher',
			'Start-Class': 'com.going.server.ServerApplication'
		)
	}
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
}

springBoot {
	mainClass = 'com.going.server.ServerApplication'
}


