name: CI/CD FOR DEVELOP

on:
  push:
    branches:
      - main
      - develop

env:
  DOCKERHUB_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}

jobs:
  CI:
    name: Continuous Integration
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      sha7: ${{ steps.slug.outputs.sha7 }}

    steps:
      - name: Get short SHA
        id: slug
        run: |
          echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Update git submodules
        run: git submodule update --init --recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Spring Profile Based on Branch
        id: set-profile
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "SPRING_PROFILE=prod" >> $GITHUB_ENV
          else
            echo "SPRING_PROFILE=dev" >> $GITHUB_ENV
          fi

      - name: Build BootJar (No Clean)
        run: |
          echo "▶ Building bootJar with $SPRING_PROFILE profile..."
          ./gradlew bootJar \
          -Dspring.profiles.active=$SPRING_PROFILE \
          -Dspring.config.location=classpath:/,file:./Backend_Config/application-$SPRING_PROFILE.properties

      - name: Check jar manifest
        run: |
          echo "▶ Checking built jar manifest..."
          unzip -p build/libs/server-0.0.1-SNAPSHOT.jar META-INF/MANIFEST.MF || true

      - name: Upload jar file to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: jar_files
          path: build/libs/server-0.0.1-SNAPSHOT.jar

      - name: Upload Dockerfile to Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Dockerfile
          path: ./Dockerfile

  CD_Delivery_to_DockerHub:
    name: CD_Delivery_to_DockerHub
    needs: CI
    runs-on: ubuntu-latest

    permissions:
      contents: read

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Download jar file from Artifact
        uses: actions/download-artifact@v4
        with:
          name: jar_files
          path: .

      - name: Download Dockerfile file from Artifact
        uses: actions/download-artifact@v4
        with:
          name: Dockerfile
          path: .



      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build, tag, and push image to DockerHub
        run: |
          echo "▶ Building Docker image..."
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.CI.outputs.sha7 }} -t ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }} --all-tags


  CD_Deploy:
    name: CD_Deploy
    needs: CD_Delivery_to_DockerHub
    runs-on: ubuntu-latest

    steps:
      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Executing remote ssh commands
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            export DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest"
            export DOCKER_COMPOSE_PATH="${{ secrets.DOCKER_COMPOSE_PATH }}"

            cd /home/ubuntu/scripts
            ./rolling-update.sh

            docker compose -f $DOCKER_COMPOSE_PATH down
            docker compose -f $DOCKER_COMPOSE_PATH pull
            docker compose -f $DOCKER_COMPOSE_PATH up -d