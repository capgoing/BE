name: CI/CD Pipeline

on:
  push:
    branches:
      - main
      - develop

env:
  DOCKERHUB_REPOSITORY: ${{ secrets.DOCKER_REPOSITORY }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read

    outputs:
      sha7: ${{ steps.slug.outputs.sha7 }}

    steps:
      - name: Get short SHA
        id: slug
        run: |
          echo "sha7=$(echo ${GITHUB_SHA} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: Checkout with submodules
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive
          fetch-depth: 0

      - name: Update git submodules
        run: git submodule update --init --recursive

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Spring Profile
        id: set-profile
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "SPRING_PROFILE=prod" >> $GITHUB_ENV
          else
            echo "SPRING_PROFILE=dev" >> $GITHUB_ENV
          fi

      - name: Build with Gradle
        run: |
          echo "▶ Building with $SPRING_PROFILE profile..."
          ./gradlew clean bootJar -x test \
          -Dspring.profiles.active=$SPRING_PROFILE \
          -Dspring.config.location=classpath:/,file:./Backend_Config/application-$SPRING_PROFILE.properties

      - name: Verify JAR
        run: |
          echo "▶ Verifying JAR file..."
          jar tf build/libs/server-0.0.1-SNAPSHOT.jar
          
          echo "▶ Checking main class..."
          if jar tf build/libs/server-0.0.1-SNAPSHOT.jar | grep -q "com/going/server/ServerApplication.class"; then
            echo "✅ Main class found"
          else
            echo "❌ Main class not found"
            exit 1
          fi

          echo "▶ Testing JAR execution..."
          java -jar build/libs/server-0.0.1-SNAPSHOT.jar --version

      - name: Upload JAR
        uses: actions/upload-artifact@v4
        with:
          name: jar-file
          path: build/libs/server-0.0.1-SNAPSHOT.jar

  docker:
    name: Build and Push Docker Image
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ACCESS_TOKEN }}
          submodules: recursive

      - name: Download JAR
        uses: actions/download-artifact@v4
        with:
          name: jar-file
          path: build/libs

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:${{ needs.build.outputs.sha7 }}
            ${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to EC2
    needs: docker
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.REMOTE_IP }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.REMOTE_PRIVATE_KEY }}
          port: ${{ secrets.REMOTE_SSH_PORT }}
          script: |
            export DOCKER_IMAGE="${{ secrets.DOCKER_USERNAME }}/${{ secrets.DOCKER_REPOSITORY }}:latest"
            export DOCKER_COMPOSE_PATH="${{ secrets.DOCKER_COMPOSE_PATH }}"

            cd /home/ubuntu/scripts
            ./rolling-update.sh

            docker compose -f $DOCKER_COMPOSE_PATH down
            docker compose -f $DOCKER_COMPOSE_PATH pull
            docker compose -f $DOCKER_COMPOSE_PATH up --build -d
